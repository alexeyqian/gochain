package protocol

import (
	"encoding/hex"
	"testing"
	"time"

	"github.com/alexeyqian/gochain/utils"
)

func TestMessageSerialization(t *testing.T) {
	version := MsgVersion{
		Version:   Version,
		NodeType:  NodeTypeFull,
		Timestamp: time.Date(2019, 11, 11, 0, 0, 0, 0, time.UTC).Unix(),
		AddrRecv: VersionNetAddr{
			NodeType: NodeTypeFull,
			IP:       NewIPv4(127, 0, 0, 1),
			Port:     9333,
		},
		AddrFrom: VersionNetAddr{
			NodeType: NodeTypeFull,
			IP:       NewIPv4(127, 0, 0, 1),
			Port:     9334,
		},
		Nonce:       31337,
		UserAgent:   NewVarStr(UserAgent),
		StartHeight: -1,
	}
	msg, err := NewMessage("simnet", "version", version)
	if err != nil {
		t.Errorf("unexpected error: %+v", err)
		return
	}

	msgSerialized := utils.Serialize(&msg)

	actual := hex.EncodeToString(msgSerialized)
	expected := "34ff89030101074d65737361676501ff8a000102010d4d65737361676548656164657201ff8c0001075061796c6f6164010a0000004cff8b0301010d4d65737361676548656164657201ff8c00010401054d6167696301ff8e000107436f6d6d616e6401ff900001064c656e6774680106000108436865636b73756d01ff8e00000018ff8d010101085b345d75696e743801ff8e0001060108000019ff8f010101095b31325d75696e743801ff9000010601180000fe0177ff8a010104161c1412010c76657273696f6e000000000001fe014e01044f05ff98ffe60001fe014eff84ff810301010a4d736756657273696f6e01ff82000108010756657273696f6e01040001084e6f646554797065010600010954696d657374616d700104000108416464725265637601ff840001084164647246726f6d01ff840001054e6f6e63650106000109557365724167656e7401ff8800010b5374617274486569676874010400000043ff830301010e56657273696f6e4e65744164647201ff84000104010454696d6501060001084e6f6465547970650106000102495001ff86000104506f7274010600000014ff85010101044950763401ff86000106010800002aff870301010656617253747201ff8800010201064c656e6774680106000106537472696e67010c00000043ff820102010101fcbb91490001020101047f00000101fe24750001020101047f00000101fe24760001fe7a6901010e010e2f676f636861696e3a312e302e300001010000"
	if actual != expected {
		t.Errorf("expected: %s, actual: %s", expected, actual)
	}

}
